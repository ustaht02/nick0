export interface FontStyle {
  id: string
  name: string
  category: string
  transform: (text: string) => string
}

export interface Decoration {
  id: string
  name: string
  category: string
  prefix: string
  suffix: string
}

export interface Language {
  code: string
  name: string
  flag: string
}

// Şekilli font dönüşümleri
export const fontStyles: FontStyle[] = [
  // Classic Fonts
  {
    id: "bold",
    name: "Bold",
    category: "classic",
    transform: (text: string) => {
      const boldMap: Record<string, string> = {
        a: "𝗮",
        b: "𝗯",
        c: "𝗰",
        d: "𝗱",
        e: "𝗲",
        f: "𝗳",
        g: "𝗴",
        h: "𝗵",
        i: "𝗶",
        j: "𝗷",
        k: "𝗸",
        l: "𝗹",
        m: "𝗺",
        n: "𝗻",
        o: "𝗼",
        p: "𝗽",
        q: "𝗾",
        r: "𝗿",
        s: "𝘀",
        t: "𝘁",
        u: "𝘂",
        v: "𝘃",
        w: "𝘄",
        x: "𝘅",
        y: "𝘆",
        z: "𝘇",
        A: "𝗔",
        B: "𝗕",
        C: "𝗖",
        D: "𝗗",
        E: "𝗘",
        F: "𝗙",
        G: "𝗚",
        H: "𝗛",
        I: "𝗜",
        J: "𝗝",
        K: "𝗞",
        L: "𝗟",
        M: "𝗠",
        N: "𝗡",
        O: "𝗢",
        P: "𝗣",
        Q: "𝗤",
        R: "𝗥",
        S: "𝗦",
        T: "𝗧",
        U: "𝗨",
        V: "𝗩",
        W: "𝗪",
        X: "𝗫",
        Y: "𝗬",
        Z: "𝗭",
        "0": "𝟬",
        "1": "𝟭",
        "2": "𝟮",
        "3": "𝟯",
        "4": "𝟰",
        "5": "𝟱",
        "6": "𝟲",
        "7": "𝟳",
        "8": "𝟴",
        "9": "𝟵",
      }
      return text
        .split("")
        .map((char) => boldMap[char] || char)
        .join("")
    },
  },
  {
    id: "italic",
    name: "Italic",
    category: "classic",
    transform: (text: string) => {
      const italicMap: Record<string, string> = {
        a: "𝘢",
        b: "𝘣",
        c: "𝘤",
        d: "𝘥",
        e: "𝘦",
        f: "𝘧",
        g: "𝘨",
        h: "𝘩",
        i: "𝘪",
        j: "𝘫",
        k: "𝘬",
        l: "𝘭",
        m: "𝘮",
        n: "𝘯",
        o: "𝘰",
        p: "𝘱",
        q: "𝘲",
        r: "𝘳",
        s: "𝘴",
        t: "𝘵",
        u: "𝘶",
        v: "𝘷",
        w: "𝘸",
        x: "𝘹",
        y: "𝘺",
        z: "𝘻",
        A: "𝘈",
        B: "𝘉",
        C: "𝘊",
        D: "𝘋",
        E: "𝘌",
        F: "𝘍",
        G: "𝘎",
        H: "𝘏",
        I: "𝘐",
        J: "𝘑",
        K: "𝘒",
        L: "𝘓",
        M: "𝘔",
        N: "𝘕",
        O: "𝘖",
        P: "𝘗",
        Q: "𝘘",
        R: "𝘙",
        S: "𝘚",
        T: "𝘛",
        U: "𝘜",
        V: "𝘝",
        W: "𝘞",
        X: "𝘟",
        Y: "𝘠",
        Z: "𝘡",
      }
      return text
        .split("")
        .map((char) => italicMap[char] || char)
        .join("")
    },
  },
  {
    id: "bold-italic",
    name: "Bold Italic",
    category: "classic",
    transform: (text: string) => {
      const boldItalicMap: Record<string, string> = {
        a: "𝙖",
        b: "𝙗",
        c: "𝙘",
        d: "𝙙",
        e: "𝙚",
        f: "𝙛",
        g: "𝙜",
        h: "𝙝",
        i: "𝙞",
        j: "𝙟",
        k: "𝙠",
        l: "𝙡",
        m: "𝙢",
        n: "𝙣",
        o: "𝙤",
        p: "𝙥",
        q: "𝙦",
        r: "𝙧",
        s: "𝙨",
        t: "𝙩",
        u: "𝙪",
        v: "𝙫",
        w: "𝙬",
        x: "𝙭",
        y: "𝙮",
        z: "𝙯",
        A: "𝘼",
        B: "𝘽",
        C: "𝘾",
        D: "𝘿",
        E: "𝙀",
        F: "𝙁",
        G: "𝙂",
        H: "𝙃",
        I: "𝙄",
        J: "𝙅",
        K: "𝙆",
        L: "𝙇",
        M: "𝙈",
        N: "𝙉",
        O: "𝙊",
        P: "𝙋",
        Q: "𝙌",
        R: "𝙍",
        S: "𝙎",
        T: "𝙏",
        U: "𝙐",
        V: "𝙑",
        W: "𝙒",
        X: "𝙓",
        Y: "𝙔",
        Z: "𝙕",
      }
      return text
        .split("")
        .map((char) => boldItalicMap[char] || char)
        .join("")
    },
  },
  {
    id: "underlined",
    name: "Underlined",
    category: "classic",
    transform: (text: string) => {
      return text
        .split("")
        .map((char) => char + "\u0332")
        .join("")
    },
  },
  {
    id: "strikethrough",
    name: "Strikethrough",
    category: "classic",
    transform: (text: string) => {
      return text
        .split("")
        .map((char) => char + "\u0336")
        .join("")
    },
  },

  // Decorative Fonts
  {
    id: "script",
    name: "Script",
    category: "decorative",
    transform: (text: string) => {
      const scriptMap: Record<string, string> = {
        a: "𝒶",
        b: "𝒷",
        c: "𝒸",
        d: "𝒹",
        e: "𝑒",
        f: "𝒻",
        g: "𝑔",
        h: "𝒽",
        i: "𝒾",
        j: "𝒿",
        k: "𝓀",
        l: "𝓁",
        m: "𝓂",
        n: "𝓃",
        o: "𝑜",
        p: "𝓅",
        q: "𝓆",
        r: "𝓇",
        s: "𝓈",
        t: "𝓉",
        u: "𝓊",
        v: "𝓋",
        w: "𝓌",
        x: "𝓍",
        y: "𝓎",
        z: "𝓏",
        A: "𝒜",
        B: "𝐵",
        C: "𝒞",
        D: "𝒟",
        E: "𝐸",
        F: "𝐹",
        G: "𝒢",
        H: "𝐻",
        I: "𝐼",
        J: "𝒥",
        K: "𝒦",
        L: "𝐿",
        M: "𝑀",
        N: "𝒩",
        O: "𝒪",
        P: "𝒫",
        Q: "𝒬",
        R: "𝑅",
        S: "𝒮",
        T: "𝒯",
        U: "𝒰",
        V: "𝒱",
        W: "𝒲",
        X: "𝒳",
        Y: "𝒴",
        Z: "𝒵",
      }
      return text
        .split("")
        .map((char) => scriptMap[char] || char)
        .join("")
    },
  },
  {
    id: "fraktur",
    name: "Fraktur",
    category: "decorative",
    transform: (text: string) => {
      const frakturMap: Record<string, string> = {
        a: "𝔞",
        b: "𝔟",
        c: "𝔠",
        d: "𝔡",
        e: "𝔢",
        f: "𝔣",
        g: "𝔤",
        h: "𝔥",
        i: "𝔦",
        j: "𝔧",
        k: "𝔨",
        l: "𝔩",
        m: "𝔪",
        n: "𝔫",
        o: "𝔬",
        p: "𝔭",
        q: "𝔮",
        r: "𝔯",
        s: "𝔰",
        t: "𝔱",
        u: "𝔲",
        v: "𝔳",
        w: "𝔴",
        x: "𝔵",
        y: "𝔶",
        z: "𝔷",
        A: "𝔄",
        B: "𝔅",
        C: "ℭ",
        D: "𝔇",
        E: "𝔈",
        F: "𝔉",
        G: "𝔊",
        H: "ℌ",
        I: "ℑ",
        J: "𝔍",
        K: "𝔎",
        L: "𝔏",
        M: "𝔐",
        N: "𝔑",
        O: "𝔒",
        P: "𝔓",
        Q: "𝔔",
        R: "ℜ",
        S: "𝔖",
        T: "𝔗",
        U: "𝔘",
        V: "𝔙",
        W: "𝔚",
        X: "𝔛",
        Y: "𝔜",
        Z: "ℨ",
      }
      return text
        .split("")
        .map((char) => frakturMap[char] || char)
        .join("")
    },
  },
  {
    id: "double",
    name: "Double Struck",
    category: "decorative",
    transform: (text: string) => {
      const doubleMap: Record<string, string> = {
        a: "𝕒",
        b: "𝕓",
        c: "𝕔",
        d: "𝕕",
        e: "𝕖",
        f: "𝕗",
        g: "𝕘",
        h: "𝕙",
        i: "𝕚",
        j: "𝕛",
        k: "𝕜",
        l: "𝕝",
        m: "𝕞",
        n: "𝕟",
        o: "𝕠",
        p: "𝕡",
        q: "𝕢",
        r: "𝕣",
        s: "𝕤",
        t: "𝕥",
        u: "𝕦",
        v: "𝕧",
        w: "𝕨",
        x: "𝕩",
        y: "𝕪",
        z: "𝕫",
        A: "𝔸",
        B: "𝔹",
        C: "ℂ",
        D: "𝔻",
        E: "𝔼",
        F: "𝔽",
        G: "𝔾",
        H: "ℍ",
        I: "𝕀",
        J: "𝕁",
        K: "𝕂",
        L: "𝕃",
        M: "𝕄",
        N: "ℕ",
        O: "𝕆",
        P: "ℙ",
        Q: "ℚ",
        R: "ℝ",
        S: "𝕊",
        T: "𝕋",
        U: "𝕌",
        V: "𝕍",
        W: "𝕎",
        X: "𝕏",
        Y: "𝕐",
        Z: "ℤ",
        "0": "𝟘",
        "1": "𝟙",
        "2": "𝟚",
        "3": "𝟛",
        "4": "𝟜",
        "5": "𝟝",
        "6": "𝟞",
        "7": "𝟟",
        "8": "𝟠",
        "9": "𝟡",
      }
      return text
        .split("")
        .map((char) => doubleMap[char] || char)
        .join("")
    },
  },

  // Modern Fonts
  {
    id: "circled",
    name: "Circled",
    category: "modern",
    transform: (text: string) => {
      const circledMap: Record<string, string> = {
        a: "ⓐ",
        b: "ⓑ",
        c: "ⓒ",
        d: "ⓓ",
        e: "ⓔ",
        f: "ⓕ",
        g: "ⓖ",
        h: "ⓗ",
        i: "ⓘ",
        j: "ⓙ",
        k: "ⓚ",
        l: "ⓛ",
        m: "ⓜ",
        n: "ⓝ",
        o: "ⓞ",
        p: "ⓟ",
        q: "ⓠ",
        r: "ⓡ",
        s: "ⓢ",
        t: "ⓣ",
        u: "ⓤ",
        v: "ⓥ",
        w: "ⓦ",
        x: "ⓧ",
        y: "ⓨ",
        z: "ⓩ",
        A: "Ⓐ",
        B: "Ⓑ",
        C: "Ⓒ",
        D: "Ⓓ",
        E: "Ⓔ",
        F: "Ⓕ",
        G: "Ⓖ",
        H: "Ⓗ",
        I: "Ⓘ",
        J: "Ⓙ",
        K: "Ⓚ",
        L: "Ⓛ",
        M: "Ⓜ",
        N: "Ⓝ",
        O: "Ⓞ",
        P: "Ⓟ",
        Q: "Ⓠ",
        R: "Ⓡ",
        S: "Ⓢ",
        T: "Ⓣ",
        U: "Ⓤ",
        V: "Ⓥ",
        W: "Ⓦ",
        X: "Ⓧ",
        Y: "Ⓨ",
        Z: "Ⓩ",
        "0": "⓪",
        "1": "①",
        "2": "②",
        "3": "③",
        "4": "④",
        "5": "⑤",
        "6": "⑥",
        "7": "⑦",
        "8": "⑧",
        "9": "⑨",
      }
      return text
        .split("")
        .map((char) => circledMap[char] || char)
        .join("")
    },
  },
  {
    id: "squared",
    name: "Squared",
    category: "modern",
    transform: (text: string) => {
      const squaredMap: Record<string, string> = {
        a: "🄰",
        b: "🄱",
        c: "🄲",
        d: "🄳",
        e: "🄴",
        f: "🄵",
        g: "🄶",
        h: "🄷",
        i: "🄸",
        j: "🄹",
        k: "🄺",
        l: "🄻",
        m: "🄼",
        n: "🄽",
        o: "🄾",
        p: "🄿",
        q: "🅀",
        r: "🅁",
        s: "🅂",
        t: "🅃",
        u: "🅄",
        v: "🅅",
        w: "🅆",
        x: "🅇",
        y: "🅈",
        z: "🅉",
        A: "🄰",
        B: "🄱",
        C: "🄲",
        D: "🄳",
        E: "🄴",
        F: "🄵",
        G: "🄶",
        H: "🄷",
        I: "🄸",
        J: "🄹",
        K: "🄺",
        L: "🄻",
        M: "🄼",
        N: "🄽",
        O: "🄾",
        P: "🄿",
        Q: "🅀",
        R: "🅁",
        S: "🅂",
        T: "🅃",
        U: "🅄",
        V: "🅅",
        W: "🅆",
        X: "🅇",
        Y: "🅈",
        Z: "🅉",
      }
      return text
        .split("")
        .map((char) => squaredMap[char] || char)
        .join("")
    },
  },
  {
    id: "negative-circled",
    name: "Negative Circled",
    category: "modern",
    transform: (text: string) => {
      const negCircledMap: Record<string, string> = {
        a: "🅐",
        b: "🅑",
        c: "🅒",
        d: "🅓",
        e: "🅔",
        f: "🅕",
        g: "🅖",
        h: "🅗",
        i: "🅘",
        j: "🅙",
        k: "🅚",
        l: "🅛",
        m: "🅜",
        n: "🅝",
        o: "🅞",
        p: "🅟",
        q: "🅠",
        r: "🅡",
        s: "🅢",
        t: "🅣",
        u: "🅤",
        v: "🅥",
        w: "🅦",
        x: "🅧",
        y: "🅨",
        z: "🅩",
        A: "🅐",
        B: "🅑",
        C: "🅒",
        D: "🅓",
        E: "🅔",
        F: "🅕",
        G: "🅖",
        H: "🅗",
        I: "🅘",
        J: "🅙",
        K: "🅚",
        L: "🅛",
        M: "🅜",
        N: "🅝",
        O: "🅞",
        P: "🅟",
        Q: "🅠",
        R: "🅡",
        S: "🅢",
        T: "🅣",
        U: "🅤",
        V: "🅥",
        W: "🅦",
        X: "🅧",
        Y: "🅨",
        Z: "🅩",
      }
      return text
        .split("")
        .map((char) => negCircledMap[char] || char)
        .join("")
    },
  },
  {
    id: "negative-squared",
    name: "Negative Squared",
    category: "modern",
    transform: (text: string) => {
      const negSquaredMap: Record<string, string> = {
        a: "🅰",
        b: "🅱",
        c: "🅲",
        d: "🅳",
        e: "🅴",
        f: "🅵",
        g: "🅶",
        h: "🅷",
        i: "🅸",
        j: "🅹",
        k: "🅺",
        l: "🅻",
        m: "🅼",
        n: "🅽",
        o: "🅾",
        p: "🅿",
        q: "🆀",
        r: "🆁",
        s: "🆂",
        t: "🆃",
        u: "🆄",
        v: "🆅",
        w: "🆆",
        x: "🆇",
        y: "🆈",
        z: "🆉",
        A: "🅰",
        B: "🅱",
        C: "🅲",
        D: "🅳",
        E: "🅴",
        F: "🅵",
        G: "🅶",
        H: "🅷",
        I: "🅸",
        J: "🅹",
        K: "🅺",
        L: "🅻",
        M: "🅼",
        N: "🅽",
        O: "🅾",
        P: "🅿",
        Q: "🆀",
        R: "🆁",
        S: "🆂",
        T: "🆃",
        U: "🆄",
        V: "🆅",
        W: "🆆",
        X: "🆇",
        Y: "🆈",
        Z: "🆉",
      }
      return text
        .split("")
        .map((char) => negSquaredMap[char] || char)
        .join("")
    },
  },
  {
    id: "parenthesized",
    name: "Parenthesized",
    category: "modern",
    transform: (text: string) => {
      const parenthesizedMap: Record<string, string> = {
        a: "⒜",
        b: "⒝",
        c: "⒞",
        d: "⒟",
        e: "⒠",
        f: "⒡",
        g: "⒢",
        h: "⒣",
        i: "⒤",
        j: "⒥",
        k: "⒦",
        l: "⒧",
        m: "⒨",
        n: "⒩",
        o: "⒪",
        p: "⒫",
        q: "⒬",
        r: "⒭",
        s: "⒮",
        t: "⒯",
        u: "⒰",
        v: "⒱",
        w: "⒲",
        x: "⒳",
        y: "⒴",
        z: "⒵",
        A: "⒜",
        B: "⒝",
        C: "⒞",
        D: "⒟",
        E: "⒠",
        F: "⒡",
        G: "⒢",
        H: "⒣",
        I: "⒤",
        J: "⒥",
        K: "⒦",
        L: "⒧",
        M: "⒨",
        N: "⒩",
        O: "⒪",
        P: "⒫",
        Q: "⒬",
        R: "⒭",
        S: "⒮",
        T: "⒯",
        U: "⒰",
        V: "⒱",
        W: "⒲",
        X: "⒳",
        Y: "⒴",
        Z: "⒵",
        "1": "⑴",
        "2": "⑵",
        "3": "⑶",
        "4": "⑷",
        "5": "⑸",
        "6": "⑹",
        "7": "⑺",
        "8": "⑻",
        "9": "⑼",
      }
      return text
        .split("")
        .map((char) => parenthesizedMap[char] || char)
        .join("")
    },
  },

  // Technical Fonts
  {
    id: "monospace",
    name: "Monospace",
    category: "technical",
    transform: (text: string) => {
      const monospaceMap: Record<string, string> = {
        a: "𝚊",
        b: "𝚋",
        c: "𝚌",
        d: "𝚍",
        e: "𝚎",
        f: "𝚏",
        g: "𝚐",
        h: "𝚑",
        i: "𝚒",
        j: "𝚓",
        k: "𝚔",
        l: "𝚕",
        m: "𝚖",
        n: "𝚗",
        o: "𝚘",
        p: "𝚙",
        q: "𝚚",
        r: "𝚛",
        s: "𝚜",
        t: "𝚝",
        u: "𝚞",
        v: "𝚟",
        w: "𝚠",
        x: "𝚡",
        y: "𝚢",
        z: "𝚣",
        A: "𝙰",
        B: "𝙱",
        C: "𝙲",
        D: "𝙳",
        E: "𝙴",
        F: "𝙵",
        G: "𝙶",
        H: "𝙷",
        I: "𝙸",
        J: "𝙹",
        K: "𝙺",
        L: "𝙻",
        M: "𝙼",
        N: "𝙽",
        O: "𝙾",
        P: "𝙿",
        Q: "𝚀",
        R: "𝚁",
        S: "𝚂",
        T: "𝚃",
        U: "𝚄",
        V: "𝚅",
        W: "𝚆",
        X: "𝚇",
        Y: "𝚈",
        Z: "𝚉",
        "0": "𝟶",
        "1": "𝟷",
        "2": "𝟸",
        "3": "𝟹",
        "4": "𝟺",
        "5": "𝟻",
        "6": "𝟼",
        "7": "𝟽",
        "8": "𝟾",
        "9": "𝟿",
      }
      return text
        .split("")
        .map((char) => monospaceMap[char] || char)
        .join("")
    },
  },
  {
    id: "fullwidth",
    name: "Fullwidth",
    category: "technical",
    transform: (text: string) => {
      const fullwidthMap: Record<string, string> = {
        a: "ａ",
        b: "ｂ",
        c: "ｃ",
        d: "ｄ",
        e: "ｅ",
        f: "ｆ",
        g: "ｇ",
        h: "ｈ",
        i: "ｉ",
        j: "ｊ",
        k: "ｋ",
        l: "ｌ",
        m: "ｍ",
        n: "ｎ",
        o: "ｏ",
        p: "ｐ",
        q: "ｑ",
        r: "ｒ",
        s: "ｓ",
        t: "ｔ",
        u: "ｕ",
        v: "ｖ",
        w: "ｗ",
        x: "ｘ",
        y: "ｙ",
        z: "ｚ",
        A: "Ａ",
        B: "Ｂ",
        C: "Ｃ",
        D: "Ｄ",
        E: "Ｅ",
        F: "Ｆ",
        G: "Ｇ",
        H: "Ｈ",
        I: "Ｉ",
        J: "Ｊ",
        K: "Ｋ",
        L: "Ｌ",
        M: "Ｍ",
        N: "Ｎ",
        O: "Ｏ",
        P: "Ｐ",
        Q: "Ｑ",
        R: "Ｒ",
        S: "Ｓ",
        T: "Ｔ",
        U: "Ｕ",
        V: "Ｖ",
        W: "Ｗ",
        X: "Ｘ",
        Y: "Ｙ",
        Z: "Ｚ",
        "0": "０",
        "1": "１",
        "2": "２",
        "3": "３",
        "4": "４",
        "5": "５",
        "6": "６",
        "7": "７",
        "8": "８",
        "9": "９",
      }
      return text
        .split("")
        .map((char) => fullwidthMap[char] || char)
        .join("")
    },
  },

  // Special Fonts
  {
    id: "small-caps",
    name: "Small Caps",
    category: "special",
    transform: (text: string) => {
      const smallCapsMap: Record<string, string> = {
        a: "ᴀ",
        b: "ʙ",
        c: "ᴄ",
        d: "ᴅ",
        e: "ᴇ",
        f: "ғ",
        g: "ɢ",
        h: "ʜ",
        i: "ɪ",
        j: "ᴊ",
        k: "ᴋ",
        l: "ʟ",
        m: "ᴍ",
        n: "ɴ",
        o: "ᴏ",
        p: "ᴘ",
        q: "ǫ",
        r: "ʀ",
        s: "s",
        t: "ᴛ",
        u: "ᴜ",
        v: "ᴠ",
        w: "ᴡ",
        x: "x",
        y: "ʏ",
        z: "ᴢ",
      }
      return text
        .split("")
        .map((char) => smallCapsMap[char.toLowerCase()] || char)
        .join("")
    },
  },
  {
    id: "superscript",
    name: "Superscript",
    category: "special",
    transform: (text: string) => {
      const superscriptMap: Record<string, string> = {
        a: "ᵃ",
        b: "ᵇ",
        c: "ᶜ",
        d: "ᵈ",
        e: "ᵉ",
        f: "ᶠ",
        g: "ᵍ",
        h: "ʰ",
        i: "ⁱ",
        j: "ʲ",
        k: "ᵏ",
        l: "ˡ",
        m: "ᵐ",
        n: "ⁿ",
        o: "ᵒ",
        p: "ᵖ",
        q: "ᑫ",
        r: "ʳ",
        s: "ˢ",
        t: "ᵗ",
        u: "ᵘ",
        v: "ᵛ",
        w: "ʷ",
        x: "ˣ",
        y: "ʸ",
        z: "ᶻ",
        A: "ᴬ",
        B: "ᴮ",
        C: "ᶜ",
        D: "ᴰ",
        E: "ᴱ",
        F: "ᶠ",
        G: "ᴳ",
        H: "ᴴ",
        I: "ᴵ",
        J: "ᴶ",
        K: "ᴷ",
        L: "ᴸ",
        M: "ᴹ",
        N: "ᴺ",
        O: "ᴼ",
        P: "ᴾ",
        Q: "Q",
        R: "ᴿ",
        S: "ˢ",
        T: "ᵀ",
        U: "ᵁ",
        V: "ⱽ",
        W: "ᵂ",
        X: "ˣ",
        Y: "ʸ",
        Z: "ᶻ",
        "0": "⁰",
        "1": "¹",
        "2": "²",
        "3": "³",
        "4": "⁴",
        "5": "⁵",
        "6": "⁶",
        "7": "⁷",
        "8": "⁸",
        "9": "⁹",
      }
      return text
        .split("")
        .map((char) => superscriptMap[char] || char)
        .join("")
    },
  },
  {
    id: "subscript",
    name: "Subscript",
    category: "special",
    transform: (text: string) => {
      const subscriptMap: Record<string, string> = {
        a: "ₐ",
        e: "ₑ",
        h: "ₕ",
        i: "ᵢ",
        j: "ⱼ",
        k: "ₖ",
        l: "ₗ",
        m: "ₘ",
        n: "ₙ",
        o: "ₒ",
        p: "ₚ",
        r: "ᵣ",
        s: "ₛ",
        t: "ₜ",
        u: "ᵤ",
        v: "ᵥ",
        x: "ₓ",
        "0": "₀",
        "1": "₁",
        "2": "₂",
        "3": "₃",
        "4": "₄",
        "5": "₅",
        "6": "₆",
        "7": "₇",
        "8": "₈",
        "9": "₉",
      }
      return text
        .split("")
        .map((char) => subscriptMap[char] || char)
        .join("")
    },
  },
]

export const decorations: Decoration[] = [
  // Basic
  { id: "none", name: "None", category: "basic", prefix: "", suffix: "" },
  { id: "dots", name: "Dots", category: "basic", prefix: "• ", suffix: " •" },
  { id: "brackets", name: "Brackets", category: "basic", prefix: "【 ", suffix: " 】" },
  { id: "waves", name: "Waves", category: "basic", prefix: "〰 ", suffix: " 〰" },

  // Symbols
  { id: "stars", name: "Stars", category: "symbols", prefix: "★ ", suffix: " ★" },
  { id: "sparkles", name: "Sparkles", category: "symbols", prefix: "✨ ", suffix: " ✨" },
  { id: "hearts", name: "Hearts", category: "symbols", prefix: "💖 ", suffix: " 💖" },
  { id: "diamond", name: "Diamond", category: "symbols", prefix: "💎 ", suffix: " 💎" },
  { id: "arrows", name: "Arrows", category: "symbols", prefix: "➤ ", suffix: " ➤" },
  { id: "infinity", name: "Infinity", category: "symbols", prefix: "∞ ", suffix: " ∞" },

  // Royal
  { id: "crown", name: "Crown", category: "royal", prefix: "👑 ", suffix: " 👑" },
  { id: "trophy", name: "Trophy", category: "royal", prefix: "🏆 ", suffix: " 🏆" },
  { id: "medal", name: "Medal", category: "royal", prefix: "🏅 ", suffix: " 🏅" },

  // Nature
  { id: "fire", name: "Fire", category: "nature", prefix: "🔥 ", suffix: " 🔥" },
  { id: "flower", name: "Flower", category: "nature", prefix: "✿ ", suffix: " ✿" },
  { id: "leaf", name: "Leaf", category: "nature", prefix: "🍃 ", suffix: " 🍃" },
  { id: "snowflake", name: "Snowflake", category: "nature", prefix: "❄ ", suffix: " ❄" },
  { id: "lightning", name: "Lightning", category: "nature", prefix: "⚡ ", suffix: " ⚡" },
  { id: "sun", name: "Sun", category: "nature", prefix: "☀ ", suffix: " ☀" },
  { id: "moon", name: "Moon", category: "nature", prefix: "🌙 ", suffix: " 🌙" },
  { id: "rainbow", name: "Rainbow", category: "nature", prefix: "🌈 ", suffix: " 🌈" },
  { id: "butterfly", name: "Butterfly", category: "nature", prefix: "🦋 ", suffix: " 🦋" },

  // Gaming
  { id: "sword", name: "Sword", category: "gaming", prefix: "⚔ ", suffix: " ⚔" },
  { id: "shield", name: "Shield", category: "gaming", prefix: "🛡 ", suffix: " 🛡" },
  { id: "game", name: "Game", category: "gaming", prefix: "🎮 ", suffix: " 🎮" },
  { id: "dice", name: "Dice", category: "gaming", prefix: "🎲 ", suffix: " 🎲" },
  { id: "target", name: "Target", category: "gaming", prefix: "🎯 ", suffix: " 🎯" },

  // Music
  { id: "music", name: "Music", category: "music", prefix: "♪ ", suffix: " ♪" },
  { id: "notes", name: "Notes", category: "music", prefix: "♫ ", suffix: " ♫" },

  // Space
  { id: "rocket", name: "Rocket", category: "space", prefix: "🚀 ", suffix: " 🚀" },
  { id: "planet", name: "Planet", category: "space", prefix: "🪐 ", suffix: " 🪐" },

  // Mythical
  { id: "dragon", name: "Dragon", category: "mythical", prefix: "🐉 ", suffix: " 🐉" },
  { id: "phoenix", name: "Phoenix", category: "mythical", prefix: "🔥🦅 ", suffix: " 🦅🔥" },

  // Dark
  { id: "skull", name: "Skull", category: "dark", prefix: "💀 ", suffix: " 💀" },
  { id: "ghost", name: "Ghost", category: "dark", prefix: "👻 ", suffix: " 👻" },

  // Tech
  { id: "alien", name: "Alien", category: "tech", prefix: "👽 ", suffix: " 👽" },
  { id: "robot", name: "Robot", category: "tech", prefix: "🤖 ", suffix: " 🤖" },

  // Greek
  { id: "omega", name: "Omega", category: "greek", prefix: "Ω ", suffix: " Ω" },
  { id: "alpha", name: "Alpha", category: "greek", prefix: "α ", suffix: " α" },
  { id: "beta", name: "Beta", category: "greek", prefix: "β ", suffix: " β" },
]

export const languages: Language[] = [
  { code: "tr", name: "Türkçe", flag: "🇹🇷" },
  { code: "en", name: "English", flag: "🇬🇧" },
  { code: "es", name: "Español", flag: "🇪🇸" },
  { code: "de", name: "Deutsch", flag: "🇩🇪" },
  { code: "fr", name: "Français", flag: "🇫🇷" },
  { code: "ar", name: "العربية", flag: "🇸🇦" },
]

// LocalStorage'dan özel fontları ve dekorasyonları yükle
export function loadCustomData() {
  if (typeof window === "undefined") return { fonts: fontStyles, decorations }

  const customFonts = localStorage.getItem("customFonts")
  const customDecorations = localStorage.getItem("customDecorations")

  return {
    fonts: customFonts ? JSON.parse(customFonts) : fontStyles,
    decorations: customDecorations ? JSON.parse(customDecorations) : decorations,
  }
}

export function saveCustomData(fonts: FontStyle[], decs: typeof decorations) {
  if (typeof window === "undefined") return

  localStorage.setItem("customFonts", JSON.stringify(fonts))
  localStorage.setItem("customDecorations", JSON.stringify(decs))
}

export const fontCategories = {
  classic: "Classic",
  decorative: "Decorative",
  modern: "Modern",
  technical: "Technical",
  special: "Special",
}

export const decorationCategories = {
  basic: "Basic",
  symbols: "Symbols",
  royal: "Royal",
  nature: "Nature",
  gaming: "Gaming",
  music: "Music",
  space: "Space",
  mythical: "Mythical",
  dark: "Dark",
  tech: "Tech",
  greek: "Greek",
}
